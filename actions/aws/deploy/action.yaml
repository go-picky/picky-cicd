---
name: 'AWS ECS deploy'
description: 'Deploy the application onto AWS ECS'
inputs:
  basepath:
    required: true
    description: 'Directory of application to be deployed'
    type: string
  name:
    required: true
    description: 'Name of the project which will be used to reference and name the output artifact'
    type: string
  version:
    required: false
    description: 'Version used to tag the artifact'
    type: string
  aws_access_key_id:
    required: true
    description: 'AWS access key ID'
  aws_secret_access_key:
    required: true
    description: 'AWS secret access key'
  aws_region:
    required: true
    description: 'region of deploy'
  environment:
    required: true

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}

# read properties
    - run: cat ${{ inputs.basepath }}/${{ inputs.environment }}/properties.txt >> $GITHUB_ENV
      shell: bash
    - run: aws ecs list-clusters --output text --query 'clusterArns[?contains(@, `development`)]'
      shell: bash
    - run: echo CLUSTER_ARN=$(aws ecs list-clusters --output text --query 'clusterArns[?contains(@, `development`)]') >> $GITHUB_ENV
      shell: bash
    # uncomment when ready to deploy to production
    # - run: aws ecs list-clusters --output text --query 'clusterArns[?contains(@, `${{ inputs.environment }}`)]'
    #   shell: bash
    # - run: echo CLUSTER_ARN=$(aws ecs list-clusters --output text --query 'clusterArns[?contains(@, `${{ inputs.environment }}`)]') >> $GITHUB_ENV
    #   shell: bash
    - run: env
      shell: bash
# inject properties into template
    - run: |
          PROCESSED=$(eval "cat 2> /dev/null <<EOF
          $(<templates/task-definition.yaml)
          EOF
          ")
          echo $PROCESSED
# register task definition
          aws ecs register-task-definition --cli-input-yaml $PROCESSED
      shell: bash
    - run: aws ecs update-service --cluster ${{ CLUSTER_ARN }} --service ${{ inputs.name }} --task-definition ${{ inputs.name }}
      shell: bash


    # - name: Register task definitions (if different)
    #   run: aws ecs register-task-definition --cli-input-yaml file://templates/task-definition.yaml
    #   shell: bash
    # - name: Update service
    #   run: aws ecs update-service --cluster ${{ CLUSTER_ARN }} --service ${{ inputs.name }} --task-definition ${{ inputs.name }}
    #   shell: bash
