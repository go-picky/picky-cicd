---
name: 'Docker build and push'
description: 'Build and Push the docker image to AWS ECR'
inputs:
  name:
    required: true
    description: 'Name of the project which will be used to reference and name the output artifact'
    type: string
  version:
    required: false
    description: 'Version used to tag the docker image'
    type: string
    default: latest
  aws_access_key_id:
    required: true
    description: 'AWS access key ID'
  aws_secret_access_key:
    required: true
    description: 'AWS secret access key'
  aws_region:
    required: true
    description: 'AWS region'
  git_token:
    required: false
    description: 'Git access token'

runs:
  using: 'composite'
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Create ECR Repository if not exists
      env:
        ECR_REPOSITORY: ${{ inputs.name }}
      run: aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || aws ecr create-repository --repository-name ${ECR_REPOSITORY}
      shell: bash
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.name }}
        IMAGE_TAG: ${{ inputs.version || 'latest' }}
        GIT_TOKEN: ${{ inputs.git_token }}
      run: |
        if [[ $GIT_TOKEN ]]
        then
          echo Setting git token
          # echo "ARGS=\"--build-arg GIT_TOKEN=${GIT_TOKEN}\"" >> $GITHUB_ENV
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --build-arg GIT_TOKEN=$GIT_TOKEN
        else
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . $ARGS
        fi

        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      shell: bash
